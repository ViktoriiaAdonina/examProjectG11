   **(на самоопрацювання)**
           //regex (регулярні вирази)
           //collections stack, queue, deque, set
           //відображення TreeMap, LinkedHashMap
           ** Java 8 **
           Example: overAll/src/main/java/learnStream
           //лямбда вирази
           //функціональні інтерфейси
           //stream API
           //default methods

    // Additional tools
        1. Spring Framework
        2. Docker and Docker-compose
        3. Cloud services (AWS, Azure, Google Cloud)
        4. AI


   **Java**
        1.Парадігми ООП
            Відповідь: інкапсуляція, наслідування, поліморфізм, абстракція
            1.1 Інкапсуляція
                Відповідь: Захищає дані від зовнішнього впливу (поля та методи)
                      Навщо це потрібно: Це треба для надійності програми
            1.2 Наслідування
                Відповідь: Можливість створювати нові класи на основі вже існуючих
                      Навщо це потрібно: Це треба для того щоб не дублювати код
            1.3 Поліморфізм
                Відповідь:
                        - Можливість використовувати об'єкти з однаковим назвою, але з різними параметрами
                        - Можливість переопріділяти методи ще і знінні в класах наслідниках
                      Навщо це потрібно:
                        - Щоб ми могли називати однаково методи (логічно однаково) і буде працювати той, які параметри дамо
                        - Що дії в насліднику могли бути іншими ніж в батька
            1.4 Абстракція
                Відповідь:
                        - Це можливість використовувати об'єкти без знання як вони працюють всередині (interface and abstract class)

        2. abstract class and common class and interface
                Відповідь:
                - abstract class - це клас, який містить абстрактні методи, які не мають реалізації та звичайні методи
                - common class - це клас, який містить методи з реалізацією
                - interface - це клас, який містить абстрактні методи, які не мають реалізації, всі його методи абстрактні (додатково може бути default method)
        3. Модифікатори доступу
            Відповідь: public, private, protected, default, final, static (одна сутність на данну java)
        4. Типи даних (примітивні і посилальні)
            Відповідь:
                Примітивні
                    - byte, short, int, long, float, double, char, boolean
                    - Зберігають значення
                Посилальні
                    - String, Integer, Double, Float, Long, Short, Byte, Character, Boolean
                    - Зберігають посилання на значення та методи по роботі з ними
        5. цикли і їх відмінності
            Відповідь:
                - for - цикл з лічильником
                - foreach - цикл для перебору масивів, колекцій, відображень
                - while - цикл з умовою
                - do while - цикл з умовою, який виконається хоча б один раз
        6. масиви і їх особливості
            Відповідь:
                - масиви це колекція однотипних даних
                - ** масиви мають фіксовану довжину **
                - масиви можна створювати з вказанням довжини або без (тобто перерахунком)
                - масиви можна створювати з вказанням даних і довжини або без
                - масиви масивів

        7. колекції і їх особливості (List vs ArrayList)
            Відповідь:
                - List - це інтерфейс, який реалізують ArrayList, LinkedList, Vector
                - ** колекції мають змінну довжину **
                - колекції мають методи для роботи з ними
                - колекції мають ітератори для перебору (ітератор - посилання на наступний елемент)
                - колекції мають методи для пошуку, видалення, додавання, заміни елементів
                - колекції мають методи для сортування
                - колекції мають методи для перетворен
        8. відображення і їх особливості (Map vs HashMap)
            Відповідь:
                - Map - це інтерфейс, який реалізують HashMap, TreeMap, LinkedHashMap
                - тип данних - пара ключ-значення
                - відображення мають змінну довжину
                - відображення мають методи для роботи з ними
                - відображення мають ітератори для перебору (ітератор - посилання на наступний елемент)
                - відображення мають методи для пошуку, видалення, додавання, заміни елементів
                - відображення мають методи для перетворен
        9. класи і обєкти
            Відповідь:
                - клас - це шаблон для створення об'єктів, тобто опис яким буде об'єкт
                - об'єкт - це екземпляр класу
                - об'єкт має поля і методи
                - об'єкт має конструктори
                - об'єкт має методи для роботи з полями
        10. конструктори
            Відповідь:
                - це методи, які викликаються при створенні об'єкта
                - конструктори можуть бути з параметрами і без
                      public class A {
                            Integer d;
                          public A() { //без параметрів (дефолтний)
                            d = 0;
                          }
                          private A(int a) {
                            d = a;
                          }
                      }
                      public A(){
                          (якщо не прописано то дефолтний конструктор)
                      }
                - конструктори можуть бути перевантажені
                - конструктори можуть бути приватними
                - конструктори можуть бути публічними
                - конструктори можуть бути дефолтними
              Для чого конструктори: для встановлення початкових значень полів, тобто ми можемо налаштовувати
              наш об'єкт при створенні
        11. сигнатура методу
            Відповідь:
                - це назва методу і його параметри
                   class Calc {
                    sum(int a, int b)
                    sum(int a, int b, int c)
                    sum(String a, String b)
                    sum1(int a, int b)
                   }
                    Calc.sum(1,1,3)
                    Calc.sum("ad","tr")

        12. типи результата методу (void vs int)
            Відповідь:
                - void - це метод, який нічого не повертає
                - int - це метод, який повертає ціле число

        13. getter and setter
            Відповідь:
                - getter - це метод, який повертає значення  поля
                - setter - це метод, який встановлює значення  поля

   //Java доп питання
        14. перевантаження методів
            Відповідь:
                - це методи з однаковою назвою, але з різними параметрами:
                    - це може бути метод з різними типами параметрів
                    - це може бути метод з різною кількістю параметрів
                    - це може бути метод з різними порядком параметрів
                                        sum(int a, int b)
                                        sum(int a, int b, int c)
                                        sum(String a, String b)
        15. перевизначення методів
            Відповідь:
                - це методи з однаковою назвою, але з різними реалізаціями (в класах наслідниках)
              class A {
                public void sum(int a, int b) {
                  System.out.println(a+b);
                }
              }
                class B extends A {
                    @Override
                    public void sum(int a, int b) {
                        System.out.println(a+b+1);
                    }
                }
        16. deserialize це
            Відповідь:
                - це процес перетворення об'єкта в Json

        17. serialize це
            Відповідь:
                - це процес перетворення Json в об'єкт


